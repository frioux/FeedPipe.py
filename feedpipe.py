#!/usr/bin/python

import feedparser
import feed.atom as FA
from uuid import uuid4
from datetime import datetime


# TODO: document entry objects better (or better yet, make Steve do it.)
class FeedPipe(object):
    """
    FeedPipe is a handy tool to mutate feeds.  Think if it as your very own
    Yahoo Pipes.
    [It was originally written in Perl](https://metacpan.org/pod/Feed::Pipe) by
    [Vince Veselosky](http://www.control-escape.com/), and ported to Python by
    [Arthur Axel fREW Schmidt](https://blog.afoolishmanifesto.com) for use on
    AWS Lambda.

    # Example usage:

        import FeedPipe from feedpipe;
        fp = FeedPipe(title => "Mah Bukkit") \
            .cat('1.xml', '2.rss', '3.atom') \
            .grep(lambda e: 'lolrus' in e.title.text) \
            .sort \
            .head

        print(fp.as_xml)

    # Entry Objects:

    A few of the most important methods in FeedPipe use "entry" objects.  Entry
    objects are [sorta documented](http://home.blarg.net/~steveha/pyfeed.html),
    but not really.  Basically they have the following properties:

        * id
        * title
        * updated
        * content
        * link
        * summary
        * published

    """
    def __init__(self,
                 title="Combined Feed",
                 id='urn:' + str(uuid4()),
                 updated=datetime.now().isoformat()):
        """
        Returns a new FeedPipe instance.

            fp = FeedPipe(title="Station")

        Arguments:
            title -- title of feed; defaults to "Combined Feed"
            id -- id of feed; defaults to autogenerated uuid
            updated -- last time feed was updated; defaults to current time
        """
        self.title = title
        self.id = id
        self.updated = updated
        self.entries = []

    # TODO: this should be lazily pulled?
    def cat(self, feeds):
        """
        Adds new entries to the FeedPipe.  Returns self for chaining.

            fp.cat(['https://blog.afoolishmanifesto.com/index.xml'])

        Arguments:
            feeds -- an array of feeds; can be a string, URL, file location, or
                     preparsed feedparser data structure

        """
        # TODO: *actually* make this handle all the stuff documented above
        for feed in feeds:
            data = feedparser.parse(feed)

            for e in data.entries:
                entry = FA.Entry()
                if 'id' in e:
                    entry.id = e.id

                if 'title' in e:
                    entry.title = e.title

                if 'updated' in e:
                    entry.updated = e.updated

                if 'content' in e:
                    # TODO: this is sketchy
                    entry.content = e.content[0].value

                if 'link' in e:
                    link = FA.Link(e.link)
                    entry.link = link

                if 'summary' in e:
                    entry.summary = e.summary

                if 'published' in e:
                    try:
                        entry.published = e.published
                    except ValueError:
                        # TODO: this is the worst
                        entry.published = datetime.strptime(
                            e.published, '%a, %d %b %Y %H:%M:%S %Z'
                        ).isoformat()

                # TODO: Fix these
                # entry.author =
                # entry.category =
                # entry.contributor =
                # entry.source =
                # entry.rights =
                self.entries.append(entry)

        return self

    def grep(self, filter):
        """
        Filters the entries in the FeedPipe.  Returns self for chaining.

            fp.grep(lambda e: "Video" not in e.title)

        Arguments:
            filter -- a callback that takes an entry; return value is if entry
                      should be included.
        """
        self.entries = [x for x in self.entries if filter(x)]

        return self

    def head(self, length=10):
        """
        Truncates feed starting at the beginning.  Returns self for chaining.

            fp.head()

        Arguments:
            length -- how many entries to include; defaults to 10
        """
        self.entries = self.entries[:length]

        return self

    def map(self, transform):
        """
        Transforms entries in the FeedPipe.  Returns self for chaining.

            def fix_title(e):
                e.title = "[STATION] " + e.title.text
                return e

            fp.map(fix_title)

        Arguments:
            transform -- a callback that takes an entry and returns it,
                         possibly modified
        """
        self.entries = [filter(x) for x in self.entries]

        return self

    def reverse(self):
        """
        Reverses the entries in the FeedPipe.  Returns self for chaining.

            fp.reverse()

        Does no harm; takes no arguments.
        """
        self.entries.reverse()

        return self

    def _default_key(e):
        if e.updated:
            return e.updated.text
        elif e.published:
            return e.published.text

    def sort(self, cmp=None, key=_default_key, reverse=True):
        """
        Sorts the entries in the FeedPipe.  Returns self for chaining.

            fp.sort(key='title')

        Arguments:
            cmp, key, and reverse; matches the interface of [the sorter
            builtin](https://docs.python.org/2/library/functions.html#sorted).
            key defaults to updated/published and reverse defaults to True, so
            that the default sort is newest at the beginning.
        """

        self.entries.sort(cmp=cmp, key=key, reverse=reverse)

        return self

    def tail(self, length=10):
        """
        Truncates the feed from the end.  Returns self for chaining.

            fp.tail()

        Arguments:
            length -- how many entries to include, starting at the end.
                      Defaults to 10.
        """
        self.entries = self.entries[len(self.entries) - length:]

        return self

    def as_atom_obj(self):
        """
        Returns a new
        [pyfeed.feed.atom.Feed](http://home.blarg.net/~steveha/pyfeed.html)
        object.

            fp.as_atom_obj()

        No arguments.
        """
        feed = FA.Feed()
        feed.generator = 'feedpipe 0.0.1'
        if self.title:
            feed.title = self.title

        if self.id:
            feed.id = self.id

        if self.updated:
            feed.updated = self.updated

        for e in self.entries:
            feed.entries.append(e)

        return feed

    def as_xml(self):
        """
        Returns a string containing the XML of the feed.

            fp.as_xml()

        Arguments: none
        """
        xmldoc = FA.XMLDoc()
        xmldoc.root_element = self.as_atom_obj()

        return str(xmldoc)

    def count(self):
        """
        Returns the count of the entries in the FeedPipe.

            fp.count()

        Takes no arguments.
        """
        return len(self.entries)
